from shutil import register_unpack_format
import uuid
from django.test import TestCase
from rest_framework import status
from rest_framework.test import APITestCase, APIClient
from api.models import Author, Post, User, Like, Comment
from django.utils import timezone
from datetime import datetime
import copy, base64, os, json
from django.db.models import Q
from http.cookies import SimpleCookie
from django.db import connections
from psycopg2.extras import Json


PORT = "5438"
HOST = "127.0.0.1"


# User Mock Data
user1 = {
    "username":"user1",
    "password":"password1"
}

user2 = {
    "username":"user2",
    "password":"password2"
}


# Author Mock Data
author1 = {
    "url":"testingUrl1",
    "host":"testingHost1",
    "displayName":"testingDisplayName1",
    "github":"testingGithub1",
    "profileImage":"testingProfileImage1"
}

author2 = {
    "url":"testingUrl2",
    "host":"testingHost2",
    "displayName":"testingDisplayName2",
    "github":"testingGithub2",
    "profileImage":"testingProfileImage2"
}



os.chdir(os.path.dirname(__file__))
imagePostPng = {
    "id": "11111111-1111-1111-1111-111111111111",
    "title":"imageTitle1",
    "contentType":"image/png;base64",
    "content":base64.b64encode(open(os.getcwd() + "/testing_media/test.png", 'rb').read()),
    "description":"imageDescription1",
    "visibility":"PUBLIC",
    "published":"2022-01-10",
    "source":"imageSource1",
    "origin":"imageOrigin1",
    "categories":"imageCategories1",
    "unlisted":False
}


'''
NOTE Fields with empty strings are updated 
in setUp for Like endpoint tests

NOTE id and type fields are generated by 
the db, i use them in the mock objects 
so i can do an equality check in some
of my tests.
'''

likeTestComment = {
    "author": "testAuthor",
    "comment": "testComment",
    "contentType": "testContentType",
    "published": "testPublished",
    "id": "91111111-1111-1111-1111-111111111111",
    "post_id": "",
    "author_id": ""
}

#Like left by author1 on post
postLike1 = {
    "id": 1,
    "type": "Like",
    "summary": "postLike1Summary",
    "author": "",
    "object": "" 
}

#Like left by author2 on post
postLike2 = {
    "id": 2,
    "type": "Like",
    "summary": "postLike2Summary",
    "author": "",
    "object": "" 
}


#Like left by author1 on comment
commentLike1 = {
    "id": 3,
    "type": "Like",
    "summary": "commentLike1Summary",
    "author": "",
    "object": ""
}

#Like left by author2 on comment
commentLike2 = {
    "id": 4,
    "type": "Like",
    "summary": "commentLike2Summary",
    "author": "",
    "object": ""
}


class LikeTestCase(TestCase):
    def setUp(self):
        self.id = uuid.uuid4()
        self.user = User.objects.create(id=self.id)
        self.author = Author.objects.create(id=self.user)
        Like.objects.create(summary="test_like_summary", author=self.author, object="test_like_object") 

    def test_like_default_values(self):
        like = Like.objects.get(Q(author=self.author) & Q(object="test_like_object"))
        self.assertEqual(like.summary, "test_like_summary")
        self.assertEqual(like.author, self.author)
        self.assertEqual(like.object, "test_like_object")

class LikeEndpointTestCase(APITestCase):
    @classmethod
    def setUpTestData(cls):
        cls.client = APIClient()

        # Create 2 new users if they don't already exist
        registerUrl = "/service/register/"
        cls.client.post(registerUrl, user1, format='json')
        cls.client.post(registerUrl, user2, format='json')
        
        # Save their ids
        user1Id = str(User.objects.get(username=user1["username"]).id)
        user2Id = str(User.objects.get(username=user2["username"]).id)
        author1["id"] = user1Id
        author2["id"] = user2Id
        user1["id"] = user1Id
        user2["id"] = user2Id
        imagePostPng["author"] = user1Id
        
        #Vars for setting up mock objects for testing Like
        cls.likeTestPost = imagePostPng
        cls.likeTestPostID = cls.likeTestPost["id"]
        cls.likeTestPostAuthorID = cls.likeTestPost["author"] 
        cls.likeTestCommentID = likeTestComment["id"]

        #Setting up objects for testing Like
        author1["type"] = "author"
        author2["type"] = "author"
        postLike1["author"] = author1
        postLike2["author"] = author2
        commentLike1["author"] = author1
        commentLike2["author"] = author2
        likeTestComment["post_id"] = cls.likeTestPostID
        likeTestComment["author_id"] = cls.likeTestPostAuthorID
        postLike1["object"] = "http://{0}:{1}/service/authors/{2}/posts/{3}".format(HOST, PORT, cls.likeTestPostAuthorID, cls.likeTestPostID)
        postLike2["object"] = "http://{0}:{1}/service/authors/{2}/posts/{3}".format(HOST, PORT, cls.likeTestPostAuthorID, cls.likeTestPostID)
        commentLike1["object"] = "http://{0}:{1}/service/authors/{2}/posts/{3}/comments/{4}".format(HOST, PORT, cls.likeTestPostAuthorID, cls.likeTestPostID, cls.likeTestCommentID)
        commentLike2["object"] = "http://{0}:{1}/service/authors/{2}/posts/{3}/comments/{4}".format(HOST, PORT, cls.likeTestPostAuthorID, cls.likeTestPostID, cls.likeTestCommentID)
        
        # Update authors
        updateUrl1 = '/service/authors/' + author1["id"] + '/'
        updateUrl2 = '/service/authors/' + author2["id"] + '/'
        
        cls.client.post(updateUrl1, author1, format='json')
        cls.client.post(updateUrl2, author2, format='json')

        #Add like objects to db
        ''' 
        Link: https://stackoverflow.com/a/42665783 
        Author: Meska
        Date: Mar 8, 2017 at 7:51
        License: SA 3.0
        
        I used this post to help with using raw sql in django
        '''
        cursor = connections['default'].cursor()
        cursor.execute("INSERT INTO api_like (summary, object, author_id) VALUES( %s , %s , %s);", [postLike1["summary"], postLike1["object"], postLike1["author"]["id"]])
        cursor.execute("INSERT INTO api_like (summary, object, author_id) VALUES( %s , %s , %s);", [postLike2["summary"], postLike2["object"], postLike2["author"]["id"]])
        cursor.execute("INSERT INTO api_like (summary, object, author_id) VALUES( %s , %s , %s);", [commentLike1["summary"], commentLike1["object"], commentLike1["author"]["id"]])
        cursor.execute("INSERT INTO api_like (summary, object, author_id) VALUES( %s , %s , %s);", [commentLike2["summary"], commentLike2["object"], commentLike2["author"]["id"]])
    
    def test_get_post_likes(self):
        # Log in as user1
        loginUrl = "/service/login/"
        self.client.post(loginUrl, user1, format='json')

        #Add post object
        addPostUrl = '/service/authors/' + author1["id"] + '/posts/' + imagePostPng["id"] + '/'
        self.client.put(addPostUrl, imagePostPng, format='json')

        postUrl =  "/service/authors/{}/inbox/".format(self.likeTestPostAuthorID)
        getUrl = "/service/authors/{0}/posts/{1}/likes/".format(self.likeTestPostAuthorID, self.likeTestPostID)

        #Add likes #NOTE doesnt currently work, add objects with sql instead
        #self.client.post(postUrl, postLike1, format="json")
        #self.client.post(postUrl, postLike2, format="json")

        #Get likes using endpoint
        response = self.client.get(getUrl) 
        likes = response.json()["items"] #List of likes

        self.assertEqual(response.status_code, status.HTTP_200_OK) #Check that request returned 200 code
        self.assertEqual(len(likes), 2) #Check that 2 likes were returned 
        
        #Check that the items returned are the mock likes
        self.assertTrue(postLike1 in likes) 
        self.assertTrue(postLike2 in likes) 

    ''' TODO un-comment when comment model is fully merged
    def test_get_comment_likes(self):
        # Log in as user1
        loginUrl = "/service/login/"
        self.client.post(loginUrl, user1, format='json')

        #Add post object
        addPostUrl = '/service/authors/' + author1["id"] + '/posts/' + imagePostPng["id"] + '/'
        self.client.put(addPostUrl, imagePostPng, format='json')

        postUrl = "/service/authors/{}/inbox/".format(self.likeTestPostAuthorID)
        getUrl = "/service/authors/{0}/posts/{1}/comments/{2}/likes".format(self.likeTestPostAuthorID, self.likeTestPostID, self.likeTestCommentID)
        postCommentUrl = "/service/authors/{0}/posts/{1}/comments".format(self.likeTestPostAuthorID, self.likeTestPostID)

        #Add comment object to db
        self.client.post(postCommentUrl, likeTestComment, format="json")
        
        #Add likes #NOTE doesnt currently work, add objects with sql instead
        #self.client.post(postUrl, commentLike1, format="json")
        #self.client.post(postUrl, commentLike2, format="json")

        #Get likes using endpoint
        response = self.client.get(getUrl)
        likes = response.json()["items"] #List of likes

        self.assertEqual(response.status_code, status.HTTP_200_OK) #Check that request returned 200 code
        self.assertEqual(len(likes), 2) #Check that 2 likes were returned 
        
        #Check that the items returned are the mock likes
        self.assertTrue(commentLike1 in likes) 
        self.assertTrue(commentLike2 in likes) 
    '''
        

    def test_get_author_likes(self):
        # Log in as user1
        loginUrl = "/service/login/"
        self.client.post(loginUrl, user1, format='json')

        postUrl = "/service/authors/{}/inbox/".format(self.likeTestPostAuthorID)
        getUrl = "/service/authors/{}/liked/".format(self.likeTestPostAuthorID)

        #Add likes #NOTE doesnt currently work, add objects with sql instead
        #self.client.post(postUrl, postLike1, format="json")
        #self.client.post(postUrl, commentLike1, format="json")

        #Get likes using endpoint
        response = self.client.get(getUrl)
        likes = response.json()["items"] #List of likes

        self.assertEqual(response.status_code, status.HTTP_200_OK) #Check that request returned 200 code
        self.assertEqual(len(likes), 2) #Check that 2 likes were returned 

        #Check that the items returned are the mock likes
        self.assertTrue(postLike1 in likes) 
        self.assertTrue(commentLike1 in likes) 